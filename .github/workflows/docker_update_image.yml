name: Update Docker Image

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'new_models/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'new_models/**'
  repository_dispatch:
    types: [kicad-3d-models-ready]

env:
  IMAGE_NAME: ionutms/3d-model-server:latest
  MODELS_DIR: ./models
  NEW_MODELS_DIR: ./new_models

jobs:
  update-docker-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get latest successful workflow run with artifacts
      if: github.event_name == 'repository_dispatch'
      id: get_latest_run
      run: |
        echo "Getting latest workflow run with artifacts for: ${{ github.event.client_payload.source_repo }}"
        echo "Looking for artifacts with name: ${{ github.event.client_payload.artifact_name }}"
        
        # Get recent successful workflow runs, ordered by creation date descending
        RUNS_JSON=$(curl -s \
          -H "Authorization: Bearer ${{ secrets.REPO_DISPATCH_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.event.client_payload.source_repo }}/actions/workflows/generate_kicad_3d_models.yml/runs?status=success&per_page=100&sort=created&direction=desc")
        
        FOUND_RUN_ID=""
        
        # Get list of run IDs into an array to avoid pipe subshell issues
        # Process them in reverse order to check latest first if the API doesn't guarantee order
        RUN_IDS=$(echo "$RUNS_JSON" | jq -r '.workflow_runs[].id')
        
        # Check each successful run for the required artifacts, starting with the most recent
        for run_id in $RUN_IDS; do
          if [ -n "$run_id" ] && [ -z "$FOUND_RUN_ID" ]; then
            echo "Checking run $run_id for artifacts..."
            
            # Check if this run has the required artifact
            ARTIFACTS_JSON=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.REPO_DISPATCH_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.event.client_payload.source_repo }}/actions/runs/$run_id/artifacts")
            
            # Check if our specific artifact exists
            ARTIFACT_EXISTS=$(echo "$ARTIFACTS_JSON" | jq -r --arg name "${{ github.event.client_payload.artifact_name }}" '.artifacts[] | select(.name == $name) | .id' | head -1)
            
            if [ -n "$ARTIFACT_EXISTS" ]; then
              echo "✅ Found required artifact in run $run_id"
              FOUND_RUN_ID="$run_id"
              break # Exit loop once the latest run with the artifact is found
            else
              echo "Required artifact not found in run $run_id"
            fi
          fi
        done
        
        if [ -z "$FOUND_RUN_ID" ]; then
          echo "❌ No successful workflow run with required artifacts found"
          exit 1
        fi
        
        echo "latest_run_id=$FOUND_RUN_ID" >> $GITHUB_OUTPUT
        
        # Get run details for logging
        RUN_DETAILS=$(curl -s \
          -H "Authorization: Bearer ${{ secrets.REPO_DISPATCH_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.event.client_payload.source_repo }}/actions/runs/$FOUND_RUN_ID")
        
        RUN_DATE=$(echo "$RUN_DETAILS" | jq -r '.created_at')
        RUN_COMMIT=$(echo "$RUN_DETAILS" | jq -r '.head_sha[:7]')
        RUN_TRIGGER=$(echo "$RUN_DETAILS" | jq -r '.event')
        
        echo "✅ Selected workflow run:"
        echo "  Run ID: $FOUND_RUN_ID"
        echo "  Date: $RUN_DATE"
        echo "  Commit: $RUN_COMMIT"
        echo "  Triggered by: $RUN_TRIGGER"

    - name: Download 3D models from source repository
      if: github.event_name == 'repository_dispatch'
      uses: dawidd6/action-download-artifact@v3
      with:
        github_token: ${{ secrets.REPO_DISPATCH_TOKEN }}
        workflow: generate_kicad_3d_models.yml
        repo: ${{ github.event.client_payload.source_repo }}
        run_id: ${{ steps.get_latest_run.outputs.latest_run_id }}
        name: ${{ github.event.client_payload.artifact_name }}
        path: ${{ env.NEW_MODELS_DIR }}

    - name: Verify downloaded artifacts
      if: github.event_name == 'repository_dispatch'
      run: |
        ARTIFACT_PATH="${{ env.NEW_MODELS_DIR }}"
        
        if [ -d "$ARTIFACT_PATH" ]; then
          echo "✅ Successfully downloaded artifacts to $ARTIFACT_PATH"
          echo "Contents:"
          find "$ARTIFACT_PATH" -type f -exec ls -la {} \;
          
          FILE_COUNT=$(find "$ARTIFACT_PATH" -type f | wc -l)
          echo "Total files downloaded: ${FILE_COUNT}"
        else
          echo "❌ Failed to download artifacts or directory not found"
          exit 1
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

    - name: Pull existing Docker image
      run: |
        echo "Pulling Docker image: ${{ env.IMAGE_NAME }}"
        docker pull ${{ env.IMAGE_NAME }}

    - name: Extract models from existing image
      run: |
        echo "Extracting model files from ${{ env.IMAGE_NAME }}..."
        
        # Create models directory
        mkdir -p ${{ env.MODELS_DIR }}
        
        # Create a temporary container to extract files
        CONTAINER_ID=$(docker create ${{ env.IMAGE_NAME }})
        
        # Extract the models directory from the container
        if docker cp ${CONTAINER_ID}:/usr/share/nginx/html/models/. ${{ env.MODELS_DIR }}/; then
          echo "✅ Successfully extracted model files to ${{ env.MODELS_DIR }}"
          
          # List extracted files
          echo "Extracted files:"
          find ${{ env.MODELS_DIR }} -type f | head -20
          
          # Show total count
          FILE_COUNT=$(find ${{ env.MODELS_DIR }} -type f | wc -l)
          echo "Total files extracted: ${FILE_COUNT}"
        else
          echo "⚠️ No models directory found in image or extraction failed"
        fi
        
        # Clean up the temporary container
        docker rm ${CONTAINER_ID}

    - name: Move new models to models directory
      run: |
        if [ -d "${{ env.NEW_MODELS_DIR }}" ] && [ "$(ls -A ${{ env.NEW_MODELS_DIR }})" ]; then
          echo "Moving files from ${{ env.NEW_MODELS_DIR }} to ${{ env.MODELS_DIR }}..."
          
          # Create models directory if it doesn't exist
          mkdir -p ${{ env.MODELS_DIR }}
          
          # Count files before moving
          NEW_FILE_COUNT=$(find ${{ env.NEW_MODELS_DIR }} -type f | wc -l)
          echo "Found ${NEW_FILE_COUNT} files to move from new_models directory"
          
          # Move files while preserving directory structure
          find ${{ env.NEW_MODELS_DIR }} -type f -print0 | while IFS= read -r -d '' file; do
            # Get relative path from new_models directory
            rel_path=${file#${{ env.NEW_MODELS_DIR }}/}
            target_file="${{ env.MODELS_DIR }}/${rel_path}"
            
            # Create target directory if needed
            target_dir=$(dirname "${target_file}")
            mkdir -p "${target_dir}"
            
            # Check if file exists and report overwrite
            if [ -f "${target_file}" ]; then
              echo "Overwriting: ${rel_path}"
            else
              echo "Adding: ${rel_path}"
            fi
            
            # Copy file
            cp "${file}" "${target_file}"
          done
          
          # Remove files from new_models but keep directory structure
          find ${{ env.NEW_MODELS_DIR }} -type f -delete
          
          echo "✅ Successfully moved ${NEW_FILE_COUNT} files from new_models to models directory"
        else
          echo "ℹ️ No new models to move (directory doesn't exist or is empty)"
        fi

    - name: Verify models directory contents
      run: |
        if [ -d "${{ env.MODELS_DIR }}" ]; then
          echo "Final models directory contents:"
          TOTAL_FILES=$(find ${{ env.MODELS_DIR }} -type f | wc -l)
          echo "Total files in models directory: ${TOTAL_FILES}"
          
          if [ ${TOTAL_FILES} -gt 0 ]; then
            echo "Sample files:"
            find ${{ env.MODELS_DIR }} -type f | head -10
            echo "..."
          else
            echo "⚠️ Warning: No files found in models directory"
          fi
        else
          echo "⚠️ Warning: Models directory does not exist"
        fi

    - name: Verify Dockerfile exists
      run: |
        if [ ! -f "Dockerfile" ]; then
          echo "❌ Error: Dockerfile not found in repository root"
          exit 1
        fi
        echo "✅ Dockerfile found"

    - name: Build Docker image
      run: |
        echo "Building Docker image: ${{ env.IMAGE_NAME }}"
        docker build --no-cache --pull=false --rm -t ${{ env.IMAGE_NAME }} .
        echo "✅ Successfully built ${{ env.IMAGE_NAME }}"

    - name: Push Docker image
      run: |
        echo "Pushing image ${{ env.IMAGE_NAME }} to registry..."
        docker push ${{ env.IMAGE_NAME }}
        echo "✅ Image pushed successfully"

    - name: Clean up local model files
      run: |
        if [ -d "${{ env.MODELS_DIR }}" ]; then
          echo "Cleaning up local model files from ${{ env.MODELS_DIR }}..."
          
          # Count files before cleanup
          FILE_COUNT=$(find ${{ env.MODELS_DIR }} -type f | wc -l)
          
          # Remove all files but keep directory structure
          find ${{ env.MODELS_DIR }} -type f -delete
          
          # Remove empty directories (except the root models directory)
          find ${{ env.MODELS_DIR }} -type d -empty -not -path "${{ env.MODELS_DIR }}" -delete
          
          echo "✅ Successfully removed ${FILE_COUNT} files from ${{ env.MODELS_DIR }}"
          echo "The ${{ env.MODELS_DIR }} directory has been preserved but is now empty"
        else
          echo "ℹ️ No models directory to clean up"
        fi

    - name: Summary
      run: |
        echo "🎉 Docker image update workflow completed successfully!"
        echo "Image: ${{ env.IMAGE_NAME }}"
        
        if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
          echo "Triggered by KiCad 3D model generation from: ${{ github.event.client_payload.source_repo }}"
          echo "Project: ${{ github.event.client_payload.project_name }}"
        fi
        
        echo "Built and pushed with latest models and changes"