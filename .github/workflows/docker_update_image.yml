name: Update Docker Image

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'new_models/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'new_models/**'
  repository_dispatch:
    types: [kicad-3d-models-ready]

env:
  IMAGE_NAME: ionutms/3d-model-server:latest
  MODELS_DIR: ./models
  NEW_MODELS_DIR: ./new_models

jobs:
  update-docker-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get latest artifacts from specific run
      if: github.event_name == 'repository_dispatch'
      id: get_artifacts
      run: |
        echo "Getting artifacts from repository dispatch..."
        SOURCE_REPO="${{ github.event.client_payload.source_repo }}"
        RUN_ID="${{ github.event.client_payload.run_id }}"
        ARTIFACT_NAME="${{ github.event.client_payload.artifact_name }}"
        PROJECT_NAME="${{ github.event.client_payload.project_name }}"
        
        echo "Source repo: $SOURCE_REPO"
        echo "Run ID: $RUN_ID"
        echo "Artifact name: $ARTIFACT_NAME"
        echo "Project name: $PROJECT_NAME"
        
        # Verify the run exists and was successful
        echo "Verifying workflow run..."
        RUN_DETAILS=$(curl -s \
          -H "Authorization: Bearer ${{ secrets.REPO_DISPATCH_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/$SOURCE_REPO/actions/runs/$RUN_ID")
        
        RUN_STATUS=$(echo "$RUN_DETAILS" | jq -r '.status')
        RUN_CONCLUSION=$(echo "$RUN_DETAILS" | jq -r '.conclusion')
        RUN_DATE=$(echo "$RUN_DETAILS" | jq -r '.created_at')
        RUN_COMMIT=$(echo "$RUN_DETAILS" | jq -r '.head_sha[:7]')
        
        echo "Run status: $RUN_STATUS"
        echo "Run conclusion: $RUN_CONCLUSION"
        echo "Run date: $RUN_DATE"
        echo "Run commit: $RUN_COMMIT"
        
        if [ "$RUN_STATUS" != "completed" ] || [ "$RUN_CONCLUSION" != "success" ]; then
          echo "❌ Workflow run $RUN_ID is not completed successfully"
          echo "Status: $RUN_STATUS, Conclusion: $RUN_CONCLUSION"
          exit 1
        fi
        
        # Check if the specific artifact exists in this run
        echo "Checking for artifact '$ARTIFACT_NAME' in run $RUN_ID..."
        ARTIFACTS_JSON=$(curl -s \
          -H "Authorization: Bearer ${{ secrets.REPO_DISPATCH_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/$SOURCE_REPO/actions/runs/$RUN_ID/artifacts")
        
        ARTIFACT_ID=$(echo "$ARTIFACTS_JSON" | jq -r --arg name "$ARTIFACT_NAME" '.artifacts[] | select(.name == $name) | .id')
        ARTIFACT_SIZE=$(echo "$ARTIFACTS_JSON" | jq -r --arg name "$ARTIFACT_NAME" '.artifacts[] | select(.name == $name) | .size_in_bytes')
        
        if [ -z "$ARTIFACT_ID" ] || [ "$ARTIFACT_ID" = "null" ]; then
          echo "❌ Artifact '$ARTIFACT_NAME' not found in run $RUN_ID"
          echo "Available artifacts:"
          echo "$ARTIFACTS_JSON" | jq -r '.artifacts[].name'
          exit 1
        fi
        
        echo "✅ Found artifact '$ARTIFACT_NAME' with ID: $ARTIFACT_ID"
        echo "Artifact size: $ARTIFACT_SIZE bytes"
        
        # Set outputs for the download step
        echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
        echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        echo "source_repo=$SOURCE_REPO" >> $GITHUB_OUTPUT

    - name: Download 3D models from source repository
      if: github.event_name == 'repository_dispatch'
      uses: dawidd6/action-download-artifact@v3
      with:
        github_token: ${{ secrets.REPO_DISPATCH_TOKEN }}
        workflow: generate_kicad_3d_models.yml
        repo: ${{ steps.get_artifacts.outputs.source_repo }}
        run_id: ${{ steps.get_artifacts.outputs.run_id }}
        name: ${{ steps.get_artifacts.outputs.artifact_name }}
        path: ${{ env.NEW_MODELS_DIR }}

    - name: Verify downloaded artifacts
      if: github.event_name == 'repository_dispatch'
      run: |
        ARTIFACT_PATH="${{ env.NEW_MODELS_DIR }}"
        
        if [ -d "$ARTIFACT_PATH" ]; then
          echo "✅ Successfully downloaded artifacts to $ARTIFACT_PATH"
          echo "Contents:"
          find "$ARTIFACT_PATH" -type f -exec ls -lh {} \;
          
          FILE_COUNT=$(find "$ARTIFACT_PATH" -type f | wc -l)
          TOTAL_SIZE=$(find "$ARTIFACT_PATH" -type f -exec stat -f%z {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || \
                       find "$ARTIFACT_PATH" -type f -exec stat -c%s {} \; | awk '{sum+=$1} END {print sum}')
          
          echo "Total files downloaded: ${FILE_COUNT}"
          echo "Total size: ${TOTAL_SIZE} bytes"
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "❌ No files found in downloaded artifacts"
            exit 1
          fi
        else
          echo "❌ Failed to download artifacts or directory not found"
          exit 1
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

    - name: Pull existing Docker image
      run: |
        echo "Pulling Docker image: ${{ env.IMAGE_NAME }}"
        docker pull ${{ env.IMAGE_NAME }} || echo "Image doesn't exist yet, will create new one"

    - name: Extract models from existing image
      run: |
        echo "Extracting model files from ${{ env.IMAGE_NAME }}..."
        
        # Create models directory
        mkdir -p ${{ env.MODELS_DIR }}
        
        # Check if image exists and extract files
        if docker image inspect ${{ env.IMAGE_NAME }} >/dev/null 2>&1; then
          # Create a temporary container to extract files
          CONTAINER_ID=$(docker create ${{ env.IMAGE_NAME }})
          
          # Extract the models directory from the container
          if docker cp ${CONTAINER_ID}:/usr/share/nginx/html/models/. ${{ env.MODELS_DIR }}/ 2>/dev/null; then
            echo "✅ Successfully extracted model files to ${{ env.MODELS_DIR }}"
            
            # List extracted files
            echo "Extracted files:"
            find ${{ env.MODELS_DIR }} -type f | head -20
            
            # Show total count
            FILE_COUNT=$(find ${{ env.MODELS_DIR }} -type f | wc -l)
            echo "Total files extracted: ${FILE_COUNT}"
          else
            echo "⚠️ No models directory found in image or extraction failed"
          fi
          
          # Clean up the temporary container
          docker rm ${CONTAINER_ID}
        else
          echo "⚠️ Image doesn't exist yet, starting with empty models directory"
        fi

    - name: Move new models to models directory
      run: |
        if [ -d "${{ env.NEW_MODELS_DIR }}" ] && [ "$(ls -A ${{ env.NEW_MODELS_DIR }})" ]; then
          echo "Moving files from ${{ env.NEW_MODELS_DIR }} to ${{ env.MODELS_DIR }}..."
          
          # Create models directory if it doesn't exist
          mkdir -p ${{ env.MODELS_DIR }}
          
          # Count files before moving
          NEW_FILE_COUNT=$(find ${{ env.NEW_MODELS_DIR }} -type f | wc -l)
          echo "Found ${NEW_FILE_COUNT} files to move from new_models directory"
          
          # Show what files we're moving
          echo "Files to be moved:"
          find ${{ env.NEW_MODELS_DIR }} -type f | head -10
          
          # Move files while preserving directory structure
          find ${{ env.NEW_MODELS_DIR }} -type f -print0 | while IFS= read -r -d '' file; do
            # Get relative path from new_models directory
            rel_path=${file#${{ env.NEW_MODELS_DIR }}/}
            target_file="${{ env.MODELS_DIR }}/${rel_path}"
            
            # Create target directory if needed
            target_dir=$(dirname "${target_file}")
            mkdir -p "${target_dir}"
            
            # Check if file exists and report overwrite
            if [ -f "${target_file}" ]; then
              echo "Overwriting: ${rel_path}"
            else
              echo "Adding: ${rel_path}"
            fi
            
            # Copy file
            cp "${file}" "${target_file}"
          done
          
          # Remove files from new_models but keep directory structure
          find ${{ env.NEW_MODELS_DIR }} -type f -delete
          
          echo "✅ Successfully moved ${NEW_FILE_COUNT} files from new_models to models directory"
        else
          echo "ℹ️ No new models to move (directory doesn't exist or is empty)"
        fi

    - name: Verify models directory contents
      run: |
        if [ -d "${{ env.MODELS_DIR }}" ]; then
          echo "Final models directory contents:"
          TOTAL_FILES=$(find ${{ env.MODELS_DIR }} -type f | wc -l)
          echo "Total files in models directory: ${TOTAL_FILES}"
          
          if [ ${TOTAL_FILES} -gt 0 ]; then
            echo "Sample files:"
            find ${{ env.MODELS_DIR }} -type f | head -10
            echo "..."
            
            # Show file types
            echo "File types:"
            find ${{ env.MODELS_DIR }} -type f -name "*.glb" | wc -l | sed 's/^/GLB files: /'
            find ${{ env.MODELS_DIR }} -type f -name "*.wrl" | wc -l | sed 's/^/WRL files: /'
          else
            echo "⚠️ Warning: No files found in models directory"
          fi
        else
          echo "⚠️ Warning: Models directory does not exist"
        fi

    - name: Verify Dockerfile exists
      run: |
        if [ ! -f "Dockerfile" ]; then
          echo "❌ Error: Dockerfile not found in repository root"
          exit 1
        fi
        echo "✅ Dockerfile found"

    - name: Build Docker image
      run: |
        echo "Building Docker image: ${{ env.IMAGE_NAME }}"
        docker build --no-cache --pull=false --rm -t ${{ env.IMAGE_NAME }} .
        echo "✅ Successfully built ${{ env.IMAGE_NAME }}"

    - name: Push Docker image
      run: |
        echo "Pushing image ${{ env.IMAGE_NAME }} to registry..."
        docker push ${{ env.IMAGE_NAME }}
        echo "✅ Image pushed successfully"

    - name: Clean up local model files
      run: |
        if [ -d "${{ env.MODELS_DIR }}" ]; then
          echo "Cleaning up local model files from ${{ env.MODELS_DIR }}..."
          
          # Count files before cleanup
          FILE_COUNT=$(find ${{ env.MODELS_DIR }} -type f | wc -l)
          
          # Remove all files but keep directory structure
          find ${{ env.MODELS_DIR }} -type f -delete
          
          # Remove empty directories (except the root models directory)
          find ${{ env.MODELS_DIR }} -type d -empty -not -path "${{ env.MODELS_DIR }}" -delete
          
          echo "✅ Successfully removed ${FILE_COUNT} files from ${{ env.MODELS_DIR }}"
          echo "The ${{ env.MODELS_DIR }} directory has been preserved but is now empty"
        else
          echo "ℹ️ No models directory to clean up"
        fi

    - name: Summary
      run: |
        echo "🎉 Docker image update workflow completed successfully!"
        echo "Image: ${{ env.IMAGE_NAME }}"
        
        if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
          echo "Triggered by KiCad 3D model generation from: ${{ github.event.client_payload.source_repo }}"
          echo "Project: ${{ github.event.client_payload.project_name }}"
          echo "Run ID: ${{ github.event.client_payload.run_id }}"
        fi
        
        echo "Built and pushed with latest models and changes"